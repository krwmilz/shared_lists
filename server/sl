#!/usr/bin/perl -I.
use warnings;
use strict;

use BSD::arc4random qw(arc4random_bytes arc4random_stir);
use DBI;
use File::Temp;
use Digest::SHA qw(sha256_base64);
use Getopt::Std;
use IO::Socket::SSL;
use Scalar::Util qw(looks_like_number);

require "msgs.pl";
our (%msg_num, @msg_str, @msg_func, $protocol_ver);

my %args;
getopts("p:t", \%args);

my $db_file = "db";
$db_file = File::Temp->new(SUFFIX => '.db', EXLOCK => 0) if ($args{t});

my $log = logger->new();
$log->print_bare("using database '$db_file'\n");

my $db = database->new();
$db->create_tables();

my $listen_sock = new IO::Socket::INET (
	LocalPort => $args{p} || '5437',
	Proto => 'tcp',
	Listen => 1,
	ReuseAddr => 1,
);
die "Could not create socket: $!\n" unless $listen_sock;

my ($addr, $port) = ($listen_sock->sockhost(), $listen_sock->sockport());
$log->print_bare("accepting connections on $addr:$port (pid = '$$')\n");

$SIG{CHLD} = 'IGNORE';

# every time accept() returns we have a new client trying to connect
while (my $client_sock = $listen_sock->accept()) {

	# create a child process to handle this client
	my $pid = fork;
	if (!defined $pid) {
		die "error: can't fork: $!\n";
	} elsif ($pid) {
		# in parent: close our copy of $client_sock and listen again
		close $client_sock;
		next;
	}

	# in child: on linux we must stir the random pool after fork()'s
	close $listen_sock;
	arc4random_stir();
	$log->set_peer_host_port($client_sock);
	$log->print("new connection (pid = '$$')\n");

	# unconditionally upgrade connection to SSL
	my $ret = IO::Socket::SSL->start_SSL($client_sock,
		SSL_server => 1,
		SSL_cert_file => 'ssl/cert_chain.pem',
		SSL_key_file => 'ssl/privkey.pem'
	);
	unless ($ret) {
		$log->print("error: $SSL_ERROR\n");
		exit 0;
	}

	my $ssl_ver = $client_sock->get_sslversion();
	my $ssl_cipher = $client_sock->get_cipher();
	$log->print("ssl ok, ver = '$ssl_ver' cipher = '$ssl_cipher'\n");

	my $db = database->new();
	$db->prepare_stmt_handles();

	while (1) {
		my ($ver, $msg_type, $msg) = recv_msg($client_sock);
		$log->set_msg($msg_str[$msg_type]);

		$db->{dbh}->begin_work;
		my $reply = $msg_func[$msg_type]->($db, $msg);
		$db->{dbh}->commit;

		if ($@) {
			# now rollback to undo the incomplete changes
			# but do it in an eval{} as it may also fail
			eval { $db->{dbh}->rollback };

			$log->print("discarding reply '$reply'\n");
			$log->print("db transaction aborted: $@\n");
			$reply = "err\0database transaction aborted";
		}

		$log->set_msg('');
		send_msg($client_sock, $ver, $msg_type, $reply);
	}
}

sub recv_msg {
	my ($sock) = @_;

	my $header = read_all($sock, 6);
	my ($version, $msg_type, $msg_size) = unpack("nnn", $header);

	if ($version != 0) {
		$log->print("error: unsupported protocol version $version\n");
		exit 0;
	}
	elsif ($msg_type >= @msg_str) {
		$log->print("error: unknown message type $msg_type\n");
		exit 0;
	}
	elsif ($msg_size > 4096) {
		$log->print("error: $msg_size byte message too large\n");
		exit 0;
	}
	elsif ($msg_size == 0) {
		# don't try and do another read, as a read of size 0 is EOF
		return ($version, $msg_type, "");
	}

	my $msg = read_all($sock, $msg_size);
	return ($version, $msg_type, $msg);
}

sub read_all {
	my ($sock, $bytes_left) = @_;

	my $data;
	while ($bytes_left > 0) {
		my $bytes_read = $sock->sysread(my $tmp, $bytes_left);

		if (!defined $bytes_read) {
			$log->print("error: read failed: $!\n");
			exit 0;
		} elsif ($bytes_read == 0) {
			$log->print("disconnected!\n");
			exit 0;
		}

		$data .= $tmp;
		$bytes_left -= $bytes_read;
	}

	return $data;
}

sub send_msg {
	my ($sock, $ver, $msg_type, $payload) = @_;

	my $header_len = 6;
	my $payload_len = length($payload);

	send_all($sock, pack("nnn", $ver, $msg_type, $payload_len), $header_len);
	send_all($sock, $payload, $payload_len);

	return $header_len + $payload_len;
}

sub send_all {
	my ($socket, $bytes, $bytes_total) = @_;

	my $bytes_written = $socket->syswrite($bytes);

	if (!defined $bytes_written) {
		$log->print("error: write failed: $!\n");
		exit 0;
	} elsif ($bytes_written != $bytes_total) {
		$log->print("error: wrote $bytes_written instead of $bytes_total bytes\n");
		exit 0;
	}

	return;
}

sub msg_device_add {
	my ($db, $msg) = @_;

	my ($err, $ph_num, $os) = split_fields($msg, 2);
	return "err\0$err" if ($err);

	unless (looks_like_number($ph_num)) {
		$log->print("phone number '$ph_num' invalid\n");
		return "err\0the sent phone number is not a number";
	}

	$db->{ph_num_exists}->execute($ph_num);
	if ($db->{ph_num_exists}->fetchrow_array()) {
		$log->print("phone number '$ph_num' already exists\n");
		return "err\0the sent phone number already exists";
	}
	if ($os ne 'unix' && $os ne 'android' && $os ne 'ios') {
		$log->print("unknown operating system '$os'\n");
		return "err\0operating system not supported";
	}

	my $device_id = sha256_base64(arc4random_bytes(32));
	my $fp = fingerprint($device_id);

	# Check the database to make sure this isn't duplicate
	$db->{select_device_id}->execute($device_id);
	if ($db->{select_device_id}->fetchrow_array()) {
		$log->print("id generation collision for '$device_id'\n");
		return "err\0device id collision, please try again"
	}

	$db->{new_device}->execute($device_id, $ph_num, $os, undef, time, time);
	$log->print("success, '$ph_num':'$fp' os '$os'\n");

	return "ok\0$device_id";
}

sub msg_list_add {
	my ($db, $msg) = @_;

	my ($err, $dev_id, $list_num, $list_name, $list_date) = split_fields($msg, 4);
	return "err\0$err" if ($err);

	my ($dev_err, $dev_num, $dev_fp, $phnum) = device_id_valid($db, $dev_id);
	return "err\0$dev_err" if ($dev_err);

	# Sending a list number of 0 triggers new list mode
	if ($list_num == 0) {
		$log->print("device '$dev_fp'\n");
		$log->print("new list name '$list_name'\n");

		my $now = time;
		$db->{new_list}->execute($list_name, $list_date, $now, $now);

		$list_num = $db->{dbh}->last_insert_id("", "", "", "");
		$log->print("new list number is '$list_num'\n");

		$db->{new_list_member}->execute($list_num, $dev_num, $now);

		# XXX: send push notifications to all my mutual friends to
		# update their 'other lists' section

		return "ok\0$list_num\0$list_name\0$list_date\0$phnum";
	}

	# Otherwise we're in list update mode
	$err = list_number_valid($db, $list_num);
	return "err\0$err" if ($err);

	# Check that the device is in the list it wants to update
	$db->{check_list_member}->execute($list_num, $dev_num);
	unless ($db->{check_list_member}->fetchrow_array()) {
		$log->print("device '$dev_fp' not in list '$list_num'\n");
		return "err\0client tried to update a list it was not in";
	}

	# Do the update
	$db->{update_list}->execute($list_name, $list_date, time, $list_num);
	$log->print("updated list '$list_num'\n");

	# XXX: send push notifications to all my mutual friends to update their
	# 'other lists' section, also tell all list members to update their
	# 'lists' section

	return "ok\0$list_num\0$list_name\0$list_date\0$phnum";
}

sub msg_list_item_add {
    my ($db, $msg) = @_;

    my ($err, $device_id) = split_fields($msg, 1);
    return "err\0$err" if ($err);

    ($err) = device_id_valid($db, $device_id);
    return "err\0$err" if ($err);

    return "err\0unimplemented";

    # my ($list_id, $position, $text) = split ("\0", $msg);
    
    # print "info: $addr: list $list_id\n";
    # print "info: $addr: position\n";
    # print "info: $addr: text $text\n";

    # check that list exists
    # check if item exists
    # check for "" owner on a stack
    # either create or add to unowned stack
    # owner will be emtpy
    # last_update 
}

sub msg_list_join {
    my ($db, $msg) = @_;

    my ($err, $dev_id, $list_num) = split_fields($msg, 2);
    return "err\0$err" if ($err);

    my ($err2, $dev_num, $dev_fp) = device_id_valid($db, $dev_id);
    return "err\0$err2" if ($err2);

    $err = list_number_valid($db, $list_num);
    return "err\0$err" if ($err);

    $log->print("device '$dev_fp'\n");
    $log->print("list '$list_num'\n");
    
    my $time = time;
    $db->{check_list_member}->execute($list_num, $dev_num);

    if (!$db->{check_list_member}->fetchrow_array()) {
        $db->{new_list_member}->execute($list_num, $dev_num, $time);
        $log->print("device '$dev_fp' has been added to list '$list_num'\n");
    } else {
        $log->print("tried to create a duplicate list member entry for device '$dev_fp' and list '$list_num'\n");
	return "err\0the device is already part of this list";
    }

    return "ok\0$list_num";
}

sub msg_list_leave {
    my ($db, $msg) = @_;

    my ($split_err, $dev_id, $list_num) = split_fields($msg, 2);
    return "err\0$split_err" if ($split_err);

    my ($dev_err, $dev_num, $dev_fp) = device_id_valid($db, $dev_id);
    return "err\0$dev_err" if ($dev_err);

    my $err = list_number_valid($db, $list_num);
    return "err\0$err" if ($err);

    $log->print("device '$dev_fp'\n");
    $log->print("list '$list_num'\n");

    $db->{check_list_member}->execute($list_num, $dev_num);

    if ($db->{check_list_member}->fetchrow_array()) {
        $db->{remove_list_member}->execute($list_num, $dev_num);
        $log->print("device '$dev_fp' has been removed from list '$list_num'\n");
    } else {
        $log->print("tried to leave a list the user was not in for device '$dev_fp' and list '$list_num'\n");
        return "err\0the client was not a member of the list";
    }
    $db->{check_list_member}->finish();

    $db->{get_list_members}->execute($list_num);
    
    my $alive = 1;

    if (!$db->{get_list_members}->fetchrow_array()) {
        $log->print("list '$list_num' is empty... deleting\n");
        $db->{delete_list}->execute($list_num);
        $db->{delete_list_data}->execute($list_num);
        $alive = 0;
    }

    return "ok\0$list_num\0$alive";
}

sub msg_friend_add {
	my ($db, $msg) = @_;

	my ($err, $dev_id, $friend_phnum) = split_fields($msg, 2);
	return "err\0$err" if ($err);

	my ($dev_err, $dev_num, $dev_fp, $dev_phnum) = device_id_valid($db, $dev_id);
	return "err\0$dev_err" if ($dev_err);

	$log->print("'$dev_fp' adding '$friend_phnum'\n");

	unless (looks_like_number($friend_phnum)) {
		$log->print("bad friends number '$friend_phnum'\n");
		return "err\0friends phone number is not a valid phone number";
	}

	# Check if I'm adding myself as a friend
	if ($dev_phnum eq $friend_phnum) {
		$log->print("device '$dev_fp' tried adding itself\n");
		return "err\0device cannot add itself as a friend";
	}

	# Add a 1 way friendship for this person
	$db->{friends_insert}->execute($dev_num, $friend_phnum);

	# Check if the added friend has registered their phone number
	$db->{ph_num_exists}->execute($friend_phnum);
	if (my ($friend_num, $friend_devid) = $db->{ph_num_exists}->fetchrow_array()) {

		$log->print("added friend is a member\n");
		my $friend_fp = fingerprint($friend_devid);
		$log->print("friends device id is '$friend_fp'\n");

		# Check if my phone number is in their friends list
		$db->{friends_select}->execute($friend_num, $dev_phnum);
		if ($db->{friends_select}->fetchrow_array()) {
			$log->print("found mutual friendship\n");

			# Adding both is technically not necessary but makes
			# lookups easier
			$db->{mutual_friend_insert}->execute($dev_num, $friend_num);
			$db->{mutual_friend_insert}->execute($friend_num, $dev_num);
		}
	}


	return "ok\0$friend_phnum";
}

sub msg_friend_delete {
	my ($db, $msg) = @_;

	my ($err, $dev_id, $friend_phnum) = split_fields($msg, 2);
	return "err\0$err" if ($err);

	my ($dev_err, $dev_num, $dev_fp) = device_id_valid($db, $dev_id);
	return "err\0$dev_err" if ($dev_err);

	unless (looks_like_number($friend_phnum)) {
		$log->print("bad friends number '$friend_phnum'\n");
		return "err\0friends phone number is not a valid phone number";
	}

	$db->{friends_select}->execute($dev_num, $friend_phnum);
	if ($db->{friends_select}->fetchrow_array()) {
		$log->print("removing '$friend_phnum' from friends list\n");
		$db->{friends_delete}->execute($dev_num, $friend_phnum);
	}
	else {
		$log->print("tried deleting friend '$friend_phnum' but they weren't a friend\n");
		return "err\0friend sent for deletion was not a friend";
	}

	# Check for and delete any mutual friend references
	$db->{ph_num_exists}->execute($friend_phnum);
	if (my ($friend_num) = $db->{ph_num_exists}->fetchrow_array()) {

		$log->print("also removing mutual friend relationship\n");
		$db->{mutual_friends_delete}->execute($dev_num, $friend_num);
		$db->{mutual_friends_delete}->execute($friend_num, $dev_num);
	}

	return "ok\0$friend_phnum";
}

sub msg_lists_get {
	my ($db, $dev_id) = @_;

	my ($err, $dev_num, $dev_fp, $phnum) = device_id_valid($db, $dev_id);
	return "err\0$err" if ($err);

	$log->print("gathering lists for '$dev_fp'\n");

	my @lists;
	$db->{get_lists}->execute($dev_num);
	while (my ($list_num, $list_name) = $db->{get_lists}->fetchrow_array()) {

		$log->print("found list '$list_num':'$list_name'\n");

		# Find all members of this list
		my @members;
		$db->{get_list_members}->execute($list_num);
		while (my ($member_num) = $db->{get_list_members}->fetchrow_array()) {

			# Don't re look-up our own number
			if ($member_num eq $dev_num) {
				push @members, $phnum;
				next;
			}

			push @members, devnum_to_phnum($db, $member_num);
		}
		my $members = join("\0", @members);
		$log->print("list has " . @members . " members\n");

		# Find how many items are complete in this list
		my $num_items = 0;
		$db->{get_list_items}->execute($list_num);
		while (my @results = $db->{get_list_items}->fetchrow_array()) {
			my (undef, $item_name, $item_status) = @results;
			# XXX: actually check the item status
			$num_items++;
		}
		$log->print("list has $num_items items\n");

		push @lists, "$list_num\0$list_name\0$num_items\0$members";
	}

	return "ok\0" . join("\n", @lists);
}

sub msg_lists_get_other {
	my ($db, $dev_id) = @_;

	my ($err, $dev_num, $dev_fp) = device_id_valid($db, $dev_id);
	return "err\0$err" if ($err);

	$log->print("gathering lists for '$dev_fp'\n");

	my @list_nums;
	$db->{get_lists}->execute($dev_num);
	while (my ($list_num) = $db->{get_lists}->fetchrow_array()) {
		push @list_nums, $list_num;
	}

	# Find all mutual friends of this device number
	my (%members, %names);
	$db->{mutual_friend_select}->execute($dev_num);
	while (my ($friend_num) = $db->{mutual_friend_select}->fetchrow_array()) {

		# We can't send device id's back to the client
		my $friend_phnum = devnum_to_phnum($db, $friend_num);

		$log->print("found mutual friend '$friend_phnum'\n");

		# Find all of the lists my mutual friend is in (but not me)
		$db->{get_lists}->execute($friend_num);
		while (my ($num, $name) = $db->{get_lists}->fetchrow_array()) {

			# filter out lists this device id is already in
			next if (grep {$_ eq $num} @list_nums);

			push(@{ $members{$num} }, $friend_phnum);
			$names{$num} = $name;
			$log->print("found list '$name'\n");
		}
	}

	my @lists;
	for (keys %names) {
		push @lists, "$_\0$names{$_}\0" . join("\0", @{$members{$_}});
	}

	return "ok\0" . join("\n", @lists);
}

sub msg_list_items_get {
	my ($db, $msg) = @_;

	my ($err, $device_id, $list_id) = split_fields($msg, 2);
	return "err\0$err" if ($err);

	($err) = device_id_valid($db, $device_id);
	return "err\0$err" if ($err);

	if (!$list_id) {
		$log->print("received null list id");
		return "err\0the sent list id was empty";
	}
	# unless ($dbh->selectrow_array($sth{check_list_member}, undef, $list_id, $device_id)) {
	# 	# XXX: table list_members list_id's should always exist in table lists
	# 	$log->print("list_items: $device_id not a member of $list_id\n");
	# 	return "err\0the sent device id is not a member of the list";
	# }
	$log->print("$device_id request items for $list_id\n");

	$db->{get_list_items}->execute($list_id);

	my @items;
	while (my ($list_id, $pos, $name, $status, $owner, undef) =
		$db->{get_list_items}->fetchrow_array()) {
		$log->print("list item #$pos $name\n");

		push @items, "$pos:$name:$owner:$status";
	}

	my $out = join("\0", @items);
	return "ok\0$out";
}

sub fingerprint {
	return substr shift, 0, 8;
}

sub split_fields {
	my ($msg, $total_fields) = @_;

	my @fields = split("\0", $msg, $total_fields);
	if (@fields != $total_fields) {
		my $fields = @fields;
		$log->print("got $fields fields, expected $total_fields\n");
		return ("the wrong number of message arguments were sent");
	}

	return (undef, @fields);
}

sub devnum_to_phnum {
	my ($db, $dev_num) = @_;

	$db->{select_device_num}->execute($dev_num);
	my (undef, undef, $ph_num) = $db->{select_device_num}->fetchrow_array;

	return $ph_num;
}

sub device_id_valid {
	my ($db, $device_id) = @_;

	unless ($device_id =~ m/^[a-zA-Z0-9+\/=]*$/) {
		$log->print("'$device_id' not base64\n");
		return ('the client sent a device id that was not base64');
	}

	$db->{select_device_id}->execute($device_id);
	if (my ($num, $id, $phnum) = $db->{select_device_id}->fetchrow_array()) {
		my $fp = fingerprint($id);
		return (undef, $num, $fp, $phnum);
	}

	$log->print("unknown device '$device_id'\n");
	return ('the client sent an unknown device id');
}

sub list_number_valid {
	my ($db, $list_num) = @_;

	unless (looks_like_number($list_num)) {
		$log->print("'$list_num' is not a number\n");
		return "the client sent a list number that was not a number";
	}

	$db->{list_select}->execute($list_num);
	unless ($db->{list_select}->fetchrow_array()) {
		$log->print("unknown list number '$list_num'\n");
		return "the client sent an unknown list number";
	}

	return;
}


package database;

sub new {
	my $class = shift;

	my $self = {};
	bless ($self, $class);

	$self->{dbh} = DBI->connect(
		"dbi:SQLite:dbname=$db_file",
		"", "",
		{ RaiseError => 1 }
	) or die $DBI::errstr;

	$self->{dbh}->do("PRAGMA foreign_keys = ON");
	$self->{dbh}->{AutoCommit} = 1;

	return $self;
}

sub create_tables {
	my ($self) = @_;

	my $db_handle = $self->{dbh};
	$db_handle->begin_work;

	$db_handle->do(qq{
		create table if not exists lists (
		num integer primary key,
		name text not null,
		date int,
		created int not null,
		last_updated int not null)
	});

	$db_handle->do(qq{
		create table if not exists devices (
		num integer primary key,
		id text not null,
		phone_num text not null,
		os text,
		push_token text,
		seen_first int not null,
		seen_last int not null)
	});

	$db_handle->do(qq{
		create table if not exists friends (
		device integer not null,
		friend text not null,
		primary key(device, friend),
		foreign key(device) references devices(num))
	});

	$db_handle->do(qq{
		create table if not exists mutual_friends (
		device integer not null,
		mutual_friend integer not null,
		primary key(device, mutual_friend),
		foreign key(device) references devices(num),
		foreign key(mutual_friend) references devices(num))
	});

	$db_handle->do(qq{
		create table if not exists list_members (
		list integer,
		device integer,
		joined int not null,
		primary key(list, device),
		foreign key(list) references lists(num),
		foreign key(device) references devices(num))
	});

	$db_handle->do(qq{
		create table if not exists list_data (
		num integer primary key,
		list integer,
		name text,
		owner integer,
		status int not null default 0,
		quantity,
		created int not null,
		last_updated int not null,
		foreign key(list) references lists(num),
		foreign key(owner) references devices(num))
	});

	$db_handle->commit;
	$self->{dbh}->disconnect();
	$self->{dbh} = undef;
}

sub prepare_stmt_handles {
	my ($self) = @_;

	my $dbh = $self->{dbh};
	my $sql;

	# list table queries
	$sql = 'select * from lists where num = ?';
	$self->{list_select} = $dbh->prepare($sql);

	$sql = 'insert into lists (name, date, created, last_updated) values (?, ?, ?, ?)';
	$self->{new_list} = $dbh->prepare($sql);

	$sql = 'update lists set name = ?, date = ?, last_updated = ? where num = ?';
	$self->{update_list} = $dbh->prepare($sql);

	$sql = 'delete from lists where num = ?';
	$self->{delete_list} = $dbh->prepare($sql);

	# devices table queries
	$sql = 'insert into devices (id, phone_num, os, push_token, seen_first, seen_last) values (?, ?, ?, ?, ?, ?)';
	$self->{new_device} = $dbh->prepare($sql);

	$sql = 'select * from devices where phone_num = ?';
	$self->{ph_num_exists} = $dbh->prepare($sql);

	$sql = 'select * from devices where id = ?';
	$self->{select_device_id} = $dbh->prepare($sql);

	$sql = 'select * from devices where num = ?';
	$self->{select_device_num} = $dbh->prepare($sql);

	# friends table queries
	$sql = 'insert or replace into friends (device, friend) values (?, ?)';
	$self->{friends_insert} = $dbh->prepare($sql);

	$sql = 'select * from friends where device = ? and friend = ?';
	$self->{friends_select} = $dbh->prepare($sql);

	$sql = 'delete from friends where device = ? and friend = ?';
	$self->{friends_delete} = $dbh->prepare($sql);

	# mutual_friends table queries
	$sql = 'insert or replace into mutual_friends (device, mutual_friend) values (?, ?)';
	$self->{mutual_friend_insert} = $dbh->prepare($sql);

	$sql = 'select mutual_friend from mutual_friends where device = ?';
	$self->{mutual_friend_select} = $dbh->prepare($sql);

	$sql = 'delete from mutual_friends where device = ? and mutual_friend = ?';
	$self->{mutual_friends_delete} = $dbh->prepare($sql);

	# lists/list_members compound queries
	$sql = qq{select lists.num, lists.name from lists, list_members where
		lists.num = list_members.list and list_members.device = ?};
	$self->{get_lists} = $dbh->prepare($sql);

	# list_members table queries
	$sql = 'select device from list_members where list = ?';
	$self->{get_list_members} = $dbh->prepare($sql);

	$sql = 'insert into list_members (list, device, joined) values (?, ?, ?)';
	$self->{new_list_member} = $dbh->prepare($sql);

	$sql = 'delete from list_members where list = ? and device = ?';
	$self->{remove_list_member} = $dbh->prepare($sql);

	$sql = 'select device from list_members where list = ? and device = ?';
	$self->{check_list_member} = $dbh->prepare($sql);

	# list_data table queries
	$sql = 'delete from list_data where list = ?';
	$self->{delete_list_data} = $dbh->prepare($sql);

	$sql = 'select * from list_data where list = ?';
	$self->{get_list_items} = $dbh->prepare($sql);

	$sql = 'insert into list_data (list, name, quantity, status, owner, last_updated) values (?, ?, ?, ?, ?, ?)';
	$self->{new_list_item} = $dbh->prepare($sql);
}

package logger;
use POSIX;

sub new {
	my $class = shift;

	my $self = {};
	bless ($self, $class);

	$self->{addr} = '';
	$self->{port} = '';
	$self->{msg_type} = '';
	return $self;
}

sub set_peer_host_port {
	my ($self, $sock) = @_;
	($self->{addr}, $self->{port}) = ($sock->peerhost(), $sock->peerport());
}

sub set_msg {
	my ($self, $msg_type) = @_;

	if ($msg_type ne '') {
		$self->{msg_type} = "$msg_type: ";
	} else {
		$self->{msg_type} = '';
	}
}

sub print {
	my ($self, @args) = @_;

	my $ftime = strftime("%F %T", localtime);
	printf "%s %-15s %-5s> %s", $ftime, $self->{addr}, $self->{port}, $self->{msg_type};
	# we print potentially unsafe strings here, don't use printf
	print @args;
}

sub print_bare {
	my ($self, @args) = @_;

	my $ftime = strftime("%F %T", localtime);
	printf "%s> ", $ftime;
	printf @args;
}
